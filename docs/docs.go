// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/instances": {
            "post": {
                "description": "Create a new AWS instance configuration in the database (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Admin: Create a new AWS instance",
                "parameters": [
                    {
                        "description": "AWS Instance",
                        "name": "instance",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AWSInstance"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created AWS instance",
                        "schema": {
                            "$ref": "#/definitions/models.AWSInstance"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create instance",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/instances/{id}": {
            "put": {
                "description": "Update an existing AWS instance configuration in the database (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Admin: Update an existing AWS instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AWS Instance",
                        "name": "instance",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AWSInstance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated AWS instance",
                        "schema": {
                            "$ref": "#/definitions/models.AWSInstance"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Instance not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update instance",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an AWS instance configuration from the database (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Admin: Delete an AWS instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Instance not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete instance",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user and return JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Username",
                        "name": "username",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login with tokens",
                        "schema": {
                            "$ref": "#/definitions/types.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "refresh_token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New tokens returned",
                        "schema": {
                            "$ref": "#/definitions/types.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Username",
                        "name": "username",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/instances": {
            "get": {
                "description": "Get a list of all AWS instances in the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Get list of AWS instances",
                "responses": {
                    "200": {
                        "description": "List of AWS instances",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AWSInstance"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch instances",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new AWS instance configuration in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Create a new AWS instance",
                "parameters": [
                    {
                        "description": "AWS Instance",
                        "name": "instance",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AWSInstance"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created AWS instance",
                        "schema": {
                            "$ref": "#/definitions/models.AWSInstance"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create instance",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/instances/{id}": {
            "get": {
                "description": "Get details of a specific AWS instance by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Get a specific AWS instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AWS instance details",
                        "schema": {
                            "$ref": "#/definitions/models.AWSInstance"
                        }
                    },
                    "404": {
                        "description": "Instance not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch instance",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing AWS instance configuration in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Update an existing AWS instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AWS Instance",
                        "name": "instance",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AWSInstance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated AWS instance",
                        "schema": {
                            "$ref": "#/definitions/models.AWSInstance"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Instance not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update instance",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an AWS instance configuration from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Delete an AWS instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Instance not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete instance",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/start": {
            "post": {
                "description": "Start the VPN EC2 instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Start VPN instance",
                "parameters": [
                    {
                        "description": "Instance ID and Region",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aws.InstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance start command sent",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Instance not found in database",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to start instance",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Get the current status of the VPN EC2 instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Get VPN instance status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID",
                        "name": "instanceId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "AWS Region",
                        "name": "region",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance status with state and name",
                        "schema": {
                            "$ref": "#/definitions/types.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Instance not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get instance status",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stop": {
            "post": {
                "description": "Stop the VPN EC2 instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPN Management"
                ],
                "summary": "Stop VPN instance",
                "parameters": [
                    {
                        "description": "Instance ID and Region",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aws.InstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance stop command sent",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Instance not found in database",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to stop instance",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "aws.InstanceRequest": {
            "type": "object",
            "properties": {
                "instanceId": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            }
        },
        "models.AWSInstance": {
            "type": "object",
            "properties": {
                "createdBy": {
                    "description": "User ID who created this instance",
                    "type": "integer"
                },
                "createdByUser": {
                    "description": "User relationship - the user who created this instance",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "instanceId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "status": {
                    "description": "current status: running, stopped, etc.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Role": {
            "type": "string",
            "enum": [
                "user",
                "admin"
            ],
            "x-enum-varnames": [
                "RoleUser",
                "RoleAdmin"
            ]
        },
        "models.Session": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_activity": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user": {
                    "description": "User relationship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "role": {
                    "description": "Default to user role",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Role"
                        }
                    ]
                },
                "sessions": {
                    "description": "Sessions relationship",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Session"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "types.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.StatusResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "types.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
