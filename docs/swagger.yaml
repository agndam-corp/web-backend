definitions:
  types.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  types.LoginResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  types.StatusResponse:
    properties:
      name:
        type: string
      state:
        type: string
    type: object
  types.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful login with tokens
          schema:
            $ref: '#/definitions/types.LoginResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: New tokens returned
          schema:
            $ref: '#/definitions/types.LoginResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: User registration
      tags:
      - Authentication
  /start:
    post:
      description: Start the VPN EC2 instance
      produces:
      - application/json
      responses:
        "200":
          description: Instance start command sent
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "500":
          description: Failed to start instance
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Start VPN instance
      tags:
      - VPN Management
  /status:
    get:
      description: Get the current status of the VPN EC2 instance
      produces:
      - application/json
      responses:
        "200":
          description: Instance status with state and name
          schema:
            $ref: '#/definitions/types.StatusResponse'
        "404":
          description: Instance not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Failed to get instance status
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get VPN instance status
      tags:
      - VPN Management
  /stop:
    post:
      description: Stop the VPN EC2 instance
      produces:
      - application/json
      responses:
        "200":
          description: Instance stop command sent
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "500":
          description: Failed to stop instance
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Stop VPN instance
      tags:
      - VPN Management
swagger: "2.0"
